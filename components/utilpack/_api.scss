// Fylgja (https://fylgja.dev)
// Licensed under MIT Open Source

@use "sass:map";
@use "sass:meta";
@use "helper" as *;

/// Handel's the single CSS util building for the build process
///
/// @param {String} $class
/// @param {String|List} $property
/// @param {String} $value
/// @param {String|List} $states - states of the class
/// @param {Boolean} $important - if the value is important
/// @param {String} $mq-prefix - the class @media prefix
/// @param {String} $separator - separator style
/// @return {Mixed} - CSS util class
@mixin build-item(
    $class,
    $property,
    $value,
    $states: null,
    $important: false,
    $mq-prefix: null,
    $class-nested: null,
    $separator: "-"
) {
    $prefix: if($mq-prefix, "#{$mq-prefix}#{$separator}", "");
    $safeprefix: if($mq-prefix, "#{$mq-prefix}-", "");
    $value: if($important, $value "!important", $value);

    %use-#{$safeprefix}#{$class} {
        @if $class-nested {
            #{$class-nested} {
                @if meta.type-of($property) == "list" {
                    @each $p in $property {
                        #{$p}: #{$value};
                    }
                } @else {
                    #{$property}: #{$value};
                }
            }
        } @else {
            @if meta.type-of($property) == "list" {
                @each $p in $property {
                    #{$p}: #{$value};
                }
            } @else {
                #{$property}: #{$value};
            }
        }
    }

    .#{$prefix}#{$class} {
        @extend %use-#{$safeprefix}#{$class};
    }

    @if $states {
        @each $state in $states {
            .#{"#{$prefix}#{$state}-#{$class}:#{$state}"} {
                @extend %use-#{$safeprefix}#{$class};
            }
        }
    }
}

/// Builds the CSS util class based on specific params
///
/// @require {Mixin} build-item - for the single CSS util building
/// @param {String} $property - CSS property
/// @param {Map} $util - Util options and values
/// @param {String} $mq-prefix - Has mq prefix
/// @return {Mixed} - CSS util classes
@mixin build(
    $property,
    $util,
    $mq-prefix: null,
    $separator: $utilpack-separator
) {
    $values: map.get($util, "values");
    $class: if(map.get($util, "class"), map.get($util, "class"), $property);
    $props: if(
        map.get($util, "property"),
        map.get($util, "property"),
        $property
    );
    $states: map.get($util, "states");
    $important: map.get($util, "important");
    $class-nested: map.get($util, "class-nested");

    @if meta.type-of($values) == "map" {
        @each $key, $value in $values {
            $classname: if(
                $class == "",
                #{$key},
                if($key == "default", "#{$class}", "#{$class}-#{$key}")
            );
            @include build-item(
                $class: $classname,
                $property: $props,
                $value: $value,
                $states: $states,
                $important: $important,
                $mq-prefix: $mq-prefix,
                $class-nested: $class-nested,
                $separator: $separator
            );
        }
    } @else {
        @each $value in $values {
            @if type-of($value) != "string" {
                @error "#{$value} is not a string value, " +
                    "Use a key if the value must be #{type-of($value)} type";
            }

            $classname: if(
                $class == "",
                #{$value},
                if($value == "default", "#{$class}", "#{$class}-#{$value}")
            );
            @include build-item(
                $class: $classname,
                $property: $props,
                $value: $value,
                $states: $states,
                $important: $important,
                $mq-prefix: $mq-prefix,
                $class-nested: $class-nested,
                $separator: $separator
            );
        }
    }
}
