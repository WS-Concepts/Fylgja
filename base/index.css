/**
 * Fylgja (https://fylgja.dev)
 * Licensed under MIT Open Source
 */
*,
::before,
::after {
  box-sizing: border-box;
  border: 0 solid;
}

:root {
  --root-bg: hsl(0, 0%, 100%);
  --root-fg: hsl(0, 0%, 8%);
  --family-emoji: "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol",
  	"Noto Color Emoji";
  --family-sans: system-ui, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell,
  	Helvetica, Arial, "Helvetica Neue", sans-serif, var(--family-emoji);
  --family-mono: ui-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas,
  	"Liberation Mono", monospace, var(--family-emoji);
  --chevron-light-scheme: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="hsl(0 0% 0%)"><path d="m6 9 6 6 6-6"/></svg>');
  --chevron-dark-scheme: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="hsl(0 0% 100%)"><path d="m6 9 6 6 6-6"/></svg>');
  --font-ratio: 1.375;
  --font-scale-1: calc(var(--font-size, 1rem) * var(--font-ratio));
  --font-scale-2: calc(var(--font-scale-1) * var(--font-ratio));
  --font-scale-3: calc(var(--font-scale-2) * var(--font-ratio));
  --font-scale-4: calc(var(--font-scale-3) * var(--font-ratio));
  --font-scale-5: calc(var(--font-scale-4) * var(--font-ratio));
  --outline-transition: outline-offset 150ms cubic-bezier(0.25, 0, 0.4, 1);
  --surface-color: color-mix(in srgb, var(--root-bg) 92%, var(--root-fg));
}

:where(:focus-visible) {
  outline: 2px solid;
  outline-offset: 2px;
}

:where(:active:focus-visible) {
  outline-offset: 0;
  transition: var(--outline-transition);
}

:target {
  scroll-margin-block: var(--anchor-offset, max(2rem, 5svb));
}

@media (prefers-reduced-motion: no-preference) {
  :has(:target) {
    scroll-behavior: smooth;
  }
}
:where(html) {
  block-size: 100%;
  font-family: var(--family-sans);
  tab-size: 4;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
  scrollbar-gutter: stable;
}

:where(body) {
  min-block-size: 100%;
  margin: 0;
  background-color: var(--root-bg);
  color: var(--root-fg);
  font-size: var(--font-size, 1rem);
  line-height: var(--line-height, 1.6);
}

:where(article, section) {
  display: flow-root;
}

:where(:any-link,
button,
input,
label[for],
select,
summary,
textarea,
[tabindex]:not([tabindex^="-"])) {
  touch-action: manipulation;
}

:where(:any-link,
button,
label[for],
label:has(input[type=radio], input[type=checkbox]),
summary,
[tabindex]:not([tabindex^="-"])) {
  cursor: pointer;
}

:where(summary) {
  display: list-item;
}

:where(summary > *) {
  display: inline;
}

:disabled {
  cursor: not-allowed;
}

:where(img, svg, video, canvas, audio, iframe, embed, object) {
  display: block;
}

:where(img, svg, video, iframe) {
  max-inline-size: 100%;
  block-size: auto;
}

:where(iframe) {
  aspect-ratio: var(--aspect-ratio, 16/9);
}

:where(h1, h2, h3, h4, h5, h6, p, dl, ul, ol, pre, hgroup) {
  margin-block: var(--text-flow, 1em 1rem);
}

:where(blockquote, figure, hr) {
  margin-block: var(--separator-flow, 2.5em);
  margin-inline: 0;
}

:where(h1, h2, h3, h4, h5, h6, legend) {
  font-size: var(--h-size, 1.1rem);
  font-weight: var(--h-weight, 700);
  line-height: var(--h-line, 1.1);
  text-wrap: balance;
}

:where(h1) {
  --h-size: var(--font-scale-5);
}

:where(h2) {
  --h-size: var(--font-scale-4);
}

:where(h3) {
  --h-size: var(--font-scale-3);
}

:where(h4) {
  --h-size: var(--font-scale-2);
}

:where(h5) {
  --h-size: var(--font-scale-1);
}

:where(p, li, dd) {
  text-wrap: pretty;
}

:where(:any-link) {
  color: inherit;
  font-weight: 500;
}

:where(blockquote) {
  padding-inline-start: 1.5em;
  border-inline-start: 4px solid;
}

:where(address) {
  font-style: inherit;
}

:where(input, button, textarea, select),
:where(input[type=file])::-webkit-file-upload-button {
  font: inherit;
}

:where(:is(ul, ol)[role=list], nav :is(ul, ol)) {
  list-style: none;
  margin-block: 0;
  padding-inline-start: 0;
}

:where(hgroup > *),
:where(dl, ol, ul) :where(dl, ol, ul) {
  margin-block: 0;
}

:where(dt) {
  font-weight: 500;
}

:where(dd + dt) {
  margin-block-start: 0.5em;
}

:where(dd) {
  margin-inline-start: 0;
}

:where(hr) {
  border-block-end-width: 2px;
  color: inherit;
}

:where(small) {
  font-size: 0.875em;
}

:where(sub, sup) {
  position: relative;
  font-size: 0.75em;
  line-height: 0;
  vertical-align: baseline;
}

:where(sub) {
  bottom: -0.25em;
}

:where(sup) {
  top: -0.5em;
}

:where(code, pre, kbd, samp) {
  font-family: var(--family-mono);
}

:where(code, kbd, mark) {
  border-radius: 0.2em;
  padding: 0.125rem 0.25rem;
}

:where(code, pre) {
  writing-mode: lr;
  direction: ltr;
}

:where(pre, :not(pre) > code) {
  background: var(--surface-color);
}

:where(kbd) {
  border-width: 1px;
}

:where(pre) {
  max-inline-size: max-content;
  border-radius: 0.5em;
  padding: 0.875em 1em;
  white-space: pre;
  overflow: auto;
}

:where(table) {
  border-spacing: 0;
  border-color: var(--table-stroke, #777);
}

:where(thead, tbody, tfoot, tr, th, td) {
  border-color: inherit;
  text-align: inherit;
}

:where(th, td) {
  padding-block: var(--table-py, 0.875em);
  padding-inline: var(--table-px, 0.625em);
  background: var(--root-bg);
  color: var(--root-fg);
}

:where(tr + tr :is(th, td)) {
  border-block-start-width: 1px;
}

:where(thead tr:last-child :is(th, td)) {
  border-block-end-width: 2px;
}

:where(tfoot tr:first-child :is(th, td)) {
  border-block-start-width: 2px;
}

:where(button, [type=button], [type=submit], [type=reset], .btn),
:where(input[type=file])::file-selector-button {
  appearance: button;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  gap: var(--btn-gap, 0.5em);
  padding-block: var(--btn-py, 0.375rem);
  padding-inline: var(--btn-px, 0.8rem);
  border-radius: var(--btn-radius, 0.5rem);
  border-width: var(--btn-border-width, 2px);
  border-color: var(--btn-stroke);
  background: var(--btn-bg, transparent);
  color: var(--btn-color, currentcolor);
  font-weight: var(--btn-font-weight, 500);
  text-decoration: none;
  transition: color 0.2s, background-color 0.2s, border-color 0.2s, box-shadow 0.2s, var(--outline-transition);
  user-select: none;
  cursor: pointer;
}

:where(button, [type=button], [type=submit], [type=reset], .btn) {
  vertical-align: middle;
}
:where(button, [type=button], [type=submit], [type=reset], .btn):hover {
  border-color: var(--btn-hover-stroke, var(--btn-stroke));
  background-color: var(--btn-hover-bg, var(--btn-bg, color-mix(in srgb, currentcolor, transparent 86%)));
  color: var(--btn-hover-color, var(--btn-color, currentcolor));
}
:where(button, [type=button], [type=submit], [type=reset], .btn):is(.is-active,
:active,
:has(:checked),
[aria-current=page],
[aria-current=true]) {
  border-color: var(--btn-active-stroke, var(--btn-stroke));
  background-color: var(--btn-active-bg, var(--btn-bg, color-mix(in srgb, currentcolor, transparent 78%)));
  color: var(--btn-active-color, var(--btn-color, currentcolor));
}
:where(button, [type=button], [type=submit], [type=reset], .btn):is(.is-disabled, :disabled) {
  box-shadow: none;
  border-color: var(--btn-disabled-stroke);
  background-color: var(--btn-disabled-bg, color-mix(in srgb, var(--root-bg) 90%, var(--root-fg)));
  color: var(--btn-disabled-color, color-mix(in srgb, var(--root-fg) 40%, var(--root-bg)));
  cursor: not-allowed;
}

:where(input[type=file]):hover::file-selector-button {
  border-color: var(--btn-hover-stroke, var(--btn-stroke));
  background-color: var(--btn-hover-bg, var(--btn-bg, color-mix(in srgb, currentcolor, transparent 86%)));
  color: var(--btn-hover-color, var(--btn-color, currentcolor));
}
:where(input[type=file]):active::file-selector-button {
  border-color: var(--btn-active-stroke, var(--btn-stroke));
  background-color: var(--btn-active-bg, var(--btn-bg, color-mix(in srgb, currentcolor, transparent 78%)));
  color: var(--btn-active-color, var(--btn-color, currentcolor));
}
:where(input[type=file]):disabled::file-selector-button {
  box-shadow: none;
  border-color: var(--btn-disabled-stroke);
  background-color: var(--btn-disabled-bg, color-mix(in srgb, var(--root-bg) 90%, var(--root-fg)));
  color: var(--btn-disabled-color, color-mix(in srgb, var(--root-fg) 40%, var(--root-bg)));
  cursor: not-allowed;
}

:where(input:not([type=checkbox],
[type=radio],
[type=range],
[type=button],
[type=reset],
[type=submit]),
textarea,
select) {
  appearance: none;
  inline-size: 100%;
  margin: 0;
  padding-block: var(--form-py, 0.375rem);
  padding-inline: var(--form-px, 0.8rem);
  border-width: var(--form-border-width, 1px);
  border-color: var(--form-stroke);
  border-radius: var(--form-radius, 0.35rem);
  background: var(--form-bg, var(--root-bg));
  color: var(--form-color, var(--root-fg));
  transition: color 250ms, background-color 250ms, border-color 250ms, box-shadow 250ms, var(--outline-transition);
  outline-offset: calc((var(--form-border-width, 1px) + 1px) * -1);
}
:where(input:not([type=checkbox],
[type=radio],
[type=range],
[type=button],
[type=reset],
[type=submit]),
textarea,
select):focus {
  border-color: var(--form-active-color);
  outline-width: 1px;
}
:where(input:not([type=checkbox],
[type=radio],
[type=range],
[type=button],
[type=reset],
[type=submit]),
textarea,
select):is(:disabled, [readonly]) {
  border-style: var(--form-disabled-border-style, dashed);
  cursor: not-allowed;
}
:where(input:not([type=checkbox],
[type=radio],
[type=range],
[type=button],
[type=reset],
[type=submit]),
textarea,
select):is(:disabled, [readonly]):focus {
  outline: none;
}
:where(input:not([type=checkbox],
[type=radio],
[type=range],
[type=button],
[type=reset],
[type=submit]),
textarea,
select):disabled {
  box-shadow: none;
  opacity: var(--form-disabled-opacity, 0.6);
}

:where(input[type=color]) {
  --form-py: 3px;
  --form-px: 3px;
  block-size: var(--block-size, 2.5em);
  inline-size: var(--inline-size, 2.5em);
}
:where(input[type=color])::-webkit-color-swatch-wrapper {
  padding: 0;
  border-radius: inherit;
}
:where(input[type=color])::-moz-color-swatch {
  border: 0;
  border-radius: inherit;
}
:where(input[type=color])::-webkit-color-swatch {
  border: 0;
  border-radius: inherit;
}

:where(input[type=file]) {
  --form-py: 0;
  --form-px: 0 0.8rem;
  --btn-radius: 0;
  --btn-border-width: var(--form-border-width, 1px);
  overflow: clip;
}
:where(input[type=file])::file-selector-button {
  margin-block: calc(var(--btn-border-width) / -1);
  margin-inline: calc(var(--btn-border-width) / -1) 1em;
}

:where(select) {
  word-wrap: normal;
}

:where(select:not([multiple], [size]:not([size="1"]))) {
  --icon: var(--select-icon, var(--chevron-light-scheme));
  --icon-size: var(--select-icon-size, 1.25em);
  --icon-offset: var(--select-icon-offset, 0.8rem);
  padding-inline-end: calc(var(--icon-size) + var(--icon-offset));
  background: var(--icon) var(--form-bg, var(--root-bg)) var(--icon-position, right) var(--icon-offset) center/var(--icon-size) no-repeat;
  -webkit-print-color-adjust: exact;
  print-color-adjust: exact;
}
:where(select:not([multiple], [size]:not([size="1"]))):dir(rtl) {
  --icon-position: left;
}

[list]:not([type*=date], [type=month], [type=week], [type=time])::-webkit-calendar-picker-indicator, [list]:not([type*=date], [type=month], [type=week], [type=time])::-webkit-list-button {
  width: 0;
  height: 0;
  margin: 0;
  padding: 0;
  visibility: hidden;
}

:where(textarea) {
  field-sizing: content;
  resize: vertical;
}

:where(label:has(input, select, textarea, progress, meter)) {
  display: block;
}

::placeholder {
  opacity: 1;
  color: color-mix(in srgb, currentcolor 54%, transparent);
}

:where(fieldset) {
  min-inline-size: 0;
  margin: 0;
  padding: 0;
}

:where(legend) {
  padding: 0;
}

:where(fieldset + fieldset) {
  margin-block-start: 1em;
}

::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-datetime-edit,
::-webkit-datetime-edit-fields-wrapper,
::-webkit-datetime-edit-year-field,
::-webkit-datetime-edit-month-field,
::-webkit-datetime-edit-day-field,
::-webkit-datetime-edit-hour-field,
::-webkit-datetime-edit-minute-field,
::-webkit-datetime-edit-second-field,
::-webkit-datetime-edit-millisecond-field,
::-webkit-datetime-edit-meridiem-field {
  display: inline;
  padding-block: 0;
}

::-webkit-date-and-time-value {
  min-height: 1lh;
  text-align: inherit;
}

:where(input[type=checkbox], input[type=radio]) {
  --_gap: var(--icon-gap, 2px);
  appearance: none;
  block-size: var(--size-y, 1.25em);
  inline-size: var(--size-x, 1.25em);
  border-radius: var(--control-radius, 0.35rem);
  border-width: var(--control-border-width, 2px);
  border-color: var(--control-stroke);
  background: var(--control-bg, none);
  color: var(--control-color, currentcolor);
  margin: 0;
  padding: var(--_gap);
  user-select: none;
}
:where(input[type=checkbox], input[type=radio]):not(:disabled) {
  cursor: pointer;
}
:where(input[type=checkbox], input[type=radio]):focus-visible {
  outline-color: var(--control-stroke, currentcolor);
}
:where(input[type=checkbox], input[type=radio])::after {
  content: "";
  display: block;
  block-size: 100%;
  inline-size: 100%;
  border-radius: inherit;
  background-color: var(--icon-color, currentcolor);
  scale: var(--_show-icon, 0);
  opacity: var(--_show-icon, 0);
  transition: translate 0.15s, scale 0.15s, opacity 0.15s;
  forced-color-adjust: none;
  -webkit-mask: var(--_icon) center/contain no-repeat;
  mask: var(--_icon) center/contain no-repeat;
}
:where(input[type=checkbox], input[type=radio]):checked {
  --_show-icon: 1;
  outline-color: var(--control-checked-stroke, var(--root-fg));
  border-color: var(--control-checked-stroke, var(--root-fg));
  background-color: var(--control-checked-bg, var(--root-fg));
  color: var(--control-checked-color, var(--root-bg));
}
:where(input[type=checkbox], input[type=radio]):disabled {
  opacity: var(--control-disabled-opacity, 0.6);
}

:where(input[type=radio]) {
  --_gap: 3px;
  --control-radius: 50%;
}

:where(input[type=checkbox]:not([role=switch])) {
  --_gap: 1px;
  --_icon: url("#");
  --checked-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='4'%3E%3Cpath d='M20 6 9 17l-5-5'/%3E %3C/svg%3E");
  --indeterminate-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='4'%3E%3Cpath d='M5 12h14'/%3E%3C/svg%3E");
}
:where(input[type=checkbox]:not([role=switch])):indeterminate {
  --_show-icon: 1;
  --_icon: var(--indeterminate-icon);
}
:where(input[type=checkbox]:not([role=switch])):checked {
  --_icon: var(--checked-icon);
}

:where(input[type=checkbox][role=switch]) {
  --_show-icon: 1;
  --control-radius: 1.25em;
  --size-x: 2em;
}
:where(input[type=checkbox][role=switch])::after {
  inline-size: auto;
  aspect-ratio: 1;
}
:where(input[type=checkbox][role=switch]):checked {
  --_offset-x: calc(var(--size-x) - var(--size-y, 1.25em));
}
:where(input[type=checkbox][role=switch]):checked::after {
  translate: var(--_offset-x) 0%;
}
:where(input[type=checkbox][role=switch]):checked:dir(rtl)::after {
  translate: calc(var(--_offset-x) / -1) 0%;
}

:where(dialog) {
  --backdrop: hsla(0, 0%, 0%, 0.3);
  --ty: var(--dialog-translate-y, 2rem);
  --tx: var(--dialog-translate-x, 0);
  --speed: var(--dialog-close-speed, 300ms);
  --screen-y: 2rem;
  --screen-x: 2rem;
  --my: auto;
  --mx: auto;
  position: fixed;
  max-block-size: calc(100% - var(--screen-y));
  max-inline-size: calc(100% - var(--screen-x));
  background-color: var(--dialog-bg, var(--surface-color));
  color: var(--dialog-color, var(--root-fg));
  border-radius: 1rem;
  margin-block: var(--my);
  margin-inline: var(--mx);
  padding: 1.5rem;
  box-shadow: var(--dialog-shadow, 0 3px 5px hsla(0, 0%, 0%, 0.18));
  translate: var(--tx) var(--ty);
  opacity: 0;
}
@media (prefers-reduced-motion: no-preference) {
  :where(dialog) {
    transition-property: translate, opacity, display, overlay;
    transition-duration: var(--speed);
    transition-behavior: allow-discrete;
  }
}

:where(dialog)::backdrop {
  background-color: var(--backdrop);
}

:where(dialog:is([open], :popover-open)) {
  --speed: var(--dialog-open-speed, 400ms);
  opacity: 1;
  translate: 0 0;
}
@starting-style {
  :where(dialog:is([open], :popover-open)) {
    opacity: 0;
    translate: var(--tx) var(--ty);
  }
}

:where(:root:has(dialog:is([open]:modal, .noscroll))) {
  overflow: hidden;
}

@media print {
  :root {
    --root-bg: white;
    --root-fg: black;
  }
  :is(h1, h2, h3, h4, h5, h6) {
    page-break-after: avoid;
  }
  :is(h2, h3, h4, h5, h6, p) {
    orphans: 3;
    widows: 3;
  }
  :is(tr, img, svg, pre, blockquote) {
    page-break-inside: avoid;
  }
  :is(abbr[title])::after {
    content: " (" attr(title) ")";
  }
  :is(a[href]:not([href^="#"], [href^="javascript:"]))::after {
    content: " (" attr(href) ")";
  }
  :is(thead) {
    display: table-header-group;
  }
  :is(input, select, textarea, button, .btn) {
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact;
  }
}
