.border {
  --border: 1px;
  --border-y: var(--border);
  --border-x: var(--border);
  border-block: var(--border-y);
  border-inline: var(--border-x);
}

.border-none {
  border: 0;
}

.clip {
  overflow: clip;
}

.content-lazy {
  --content-size: 500px;
  content-visibility: auto;
  contain-intrinsic-block-size: var(--content-size);
}

.divide-y > :not(template, [hidden]:where(:not([hidden=until-found]))) + * {
  --divide: 1px;
  border-block-start-width: var(--divide);
}

.divide-x > :not(template, [hidden]:where(:not([hidden=until-found]))) + * {
  --divide: 1px;
  border-inline-start-width: var(--divide);
}

.divide-gap-y > :not(template, [hidden]:where(:not([hidden=until-found]))) {
  --gap: 0.5em;
}
.divide-gap-y > :not(template, [hidden]:where(:not([hidden=until-found]))):not(:first-of-type) {
  padding-block-start: var(--gap);
}
.divide-gap-y > :not(template, [hidden]:where(:not([hidden=until-found]))):not(:last-of-type) {
  padding-block-end: var(--gap);
}

.divide-gap-x > :not(template, [hidden]:where(:not([hidden=until-found]))) {
  --gap: 0.5em;
}
.divide-gap-x > :not(template, [hidden]:where(:not([hidden=until-found]))):not(:first-of-type) {
  padding-inline-start: var(--gap);
}
.divide-gap-x > :not(template, [hidden]:where(:not([hidden=until-found]))):not(:last-of-type) {
  padding-inline-end: var(--gap);
}

:where(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending]) > .flip {
  scale: -1;
}

:where(details[open] > summary, [aria-expanded=true], [aria-selected=true], [aria-sort=ascending]) > .flip-rotate {
  rotate: 180deg;
}

.flow-unset > *,
.flow > :first-child {
  margin-block: 0;
}

.flow > * + * {
  margin-block: var(--flow, 1em) 0;
}

.bg-gradient,
.border-gradient,
.text-gradient {
  --gradient-from: currentcolor;
  --gradient-to: transparent;
  --gradient-stops: var(--gradient-from), var(--gradient-to);
  --gradient-angle: 0deg;
  --gradient: linear-gradient(var(--gradient-angle), var(--gradient-stops));
}

.bg-gradient {
  background-image: var(--gradient);
}

.border-gradient {
  border-image-source: var(--gradient);
  border-image-slice: 1;
}

.text-gradient {
  -webkit-background-clip: text;
  background-clip: text;
  background-image: var(--gradient);
  color: transparent;
}

.line-clamp {
  --line-count: 3;
  display: -webkit-box;
  overflow: hidden;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: var(--line-count);
}

.list-none {
  list-style-type: none;
}
.list-none::-webkit-details-marker {
  display: none;
}

.overlay {
  --overlay-bg: hsl(0 0% 0% / 60%);
  --overlay-fg: #fff;
  border-image: 0 fill linear-gradient(0deg, var(--overlay-bg), transparent);
  color: var(--overlay-fg);
}

:where(.relative, .sticky, .absolute, .fixed) {
  --z: 1;
  --inset: auto;
  --inset-y: var(--inset);
  --inset-x: var(--inset);
  z-index: var(--z);
  inset-block: var(--inset-y);
  inset-inline: var(--inset-x);
}

.relative {
  --z: auto;
  position: relative;
}

.sticky {
  --inset-y: 0 auto;
  position: sticky;
}

.absolute {
  position: absolute;
}

.fixed {
  position: fixed;
}

.rounded {
  --rounded: 0.5rem;
  --rounded-y: var(--rounded);
  --rounded-x: var(--rounded);
  border-start-start-radius: var(--rounded-y);
  border-end-start-radius: var(--rounded-y);
  border-end-end-radius: var(--rounded-x);
  border-start-end-radius: var(--rounded-x);
}

.rounded-none {
  border-radius: 0;
}

.rounded-inherit {
  border-radius: inherit;
}

.round {
  aspect-ratio: 1;
  border-radius: 100000px;
  overflow: clip;
}

.scroll-x {
  --scroll-x: auto;
  overflow-x: var(--scroll-x);
  overscroll-behavior-x: contain;
}

.scroll-y {
  --scroll-y: auto;
  overflow-y: var(--scroll-y);
  overscroll-behavior-y: contain;
}

.scrollbar-none {
  scrollbar-width: none;
}
.scrollbar-none::-webkit-scrollbar {
  display: none;
}

.scrollbar-thin {
  scrollbar-width: thin;
}
.scrollbar-thin::-webkit-scrollbar {
  width: 0.4rem;
  height: 0.4rem;
}

.w-full {
  inline-size: 100%;
}

.snap {
  --snap-dir: x mandatory;
  --snap-stop: normal;
  --snap-align: start;
  scroll-snap-type: var(--snap-dir);
  scroll-snap-stop: var(--snap-stop);
  scroll-behavior: smooth;
}
.snap > * {
  scroll-snap-align: var(--snap-align);
}

:where([style*="--my:"]) {
  margin-block: var(--my);
}

:where([style*="--mx:"]) {
  margin-inline: var(--mx);
}

:where([style*="--py:"]) {
  padding-block: var(--py);
}

:where([style*="--px:"]) {
  padding-inline: var(--px);
}

.stretched-link::after {
  content: "";
  position: absolute;
  inset: 0;
}

.transition-display, .transition-color, .transition {
  --transition-props: border-color, background-color, color,
  	text-decoration-color, opacity, box-shadow, transform, translate, scale,
  	rotate, filter, backdrop-filter, display, overlay;
  --transition-ease: cubic-bezier(0.5, 0, 0.5, 1);
  --transition-duration: 150ms;
  transition-property: var(--transition-props);
  transition-timing-function: var(--transition-ease);
  transition-duration: var(--transition-duration);
  transition-behavior: allow-discrete;
}

.transition-color {
  --properties: border-color, background-color, color, text-decoration-color;
}

.transition-display {
  --properties: opacity, transform, translate, scale, rotate, display, overlay;
}

.truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.text-start {
  text-align: start;
}

.text-center {
  text-align: center;
}

.text-end {
  text-align: end;
}

.italic {
  font-style: italic;
}

.not-italic {
  font-style: italic;
}

.visible,
.peer-invalid\:invisible,
.has-hover\:invisible {
  visibility: visible;
}

.invisible,
.peer-invalid\:visible,
.has-hover\:visible {
  visibility: hidden;
}

:user-invalid ~ .peer-invalid\:visible,
:hover > .has-hover\:visible {
  visibility: visible;
}

:user-invalid ~ .peer-invalid\:invisible,
:hover > .has-hover\:invisible {
  visibility: hidden;
}

.auto-grid {
  --max-cols: 4;
  --max-cols-size: 14rem;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(clamp(100% / var(--max-cols), var(--max-cols-size), 100%), 1fr));
}

.grid {
  --grid-cols: 1;
  --_cols: var(--grid-cols);
  display: grid;
  grid-template-columns: repeat(var(--_cols), minmax(0, 1fr));
}

.grid-flow {
  --grid-flow-size: calc(
  	(100% - var(--_gap, var(--gap, 0px)) * (var(--_cols) - 1)) /
  		var(--_cols)
  );
  grid-template-columns: none;
  grid-auto-flow: column;
  grid-auto-columns: var(--grid-flow-size);
}

:is(.flex, .flex-col, .inline-flex) {
  --flex-dir: row;
  --flex-wrap: nowrap;
  --grow: initial;
  --shrink: initial;
  --basis: initial;
  --_flexD: var(--flex-dir);
  --_flexW: var(--flex-wrap);
  display: flex;
  flex-flow: var(--_flexD) var(--_flexW);
}
:is(.flex, .flex-col, .inline-flex) > * {
  --flex: var(--grow, 0) var(--shrink, 1) var(--basis, auto);
  --_flexI: var(--flex);
  flex: var(--_flexI);
}

.flex-col {
  --flex-dir: column;
}

.inline-flex {
  display: inline flex;
}

.stack {
  display: grid;
}
.stack > *,
.stack > ::before,
.stack > ::after {
  grid-area: 1/1;
}

.hidden {
  display: none;
}

.block {
  display: block;
}

.inline-block {
  display: inline-block;
}

.align {
  --align: normal space-between;
  --align-items: center legacy;
  --_alignC: var(--align);
  --_alignI: var(--align-items);
  place-content: var(--_alignC);
  place-items: var(--_alignI);
}
.align > * {
  --align-self: auto;
  --_alignS: var(--align-self);
  place-self: var(--_alignS);
}

.gap {
  --gap: 1em;
  --_gap: var(--gap);
  gap: var(--_gap);
}

.sr-only {
  --_show: initial;
  position: var(--_show, absolute);
  block-size: var(--_show, 1px);
  inline-size: var(--_show, 1px);
  overflow: var(--_show, hidden);
  clip-path: var(--_show, inset(50%));
}
